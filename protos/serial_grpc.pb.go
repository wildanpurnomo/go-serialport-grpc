// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.1.0
// - protoc             v3.17.3
// source: protos/serial.proto

package protos

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// SerialClient is the client API for Serial service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type SerialClient interface {
	GetSerialData(ctx context.Context, in *Request, opts ...grpc.CallOption) (Serial_GetSerialDataClient, error)
}

type serialClient struct {
	cc grpc.ClientConnInterface
}

func NewSerialClient(cc grpc.ClientConnInterface) SerialClient {
	return &serialClient{cc}
}

func (c *serialClient) GetSerialData(ctx context.Context, in *Request, opts ...grpc.CallOption) (Serial_GetSerialDataClient, error) {
	stream, err := c.cc.NewStream(ctx, &Serial_ServiceDesc.Streams[0], "/protos.Serial/GetSerialData", opts...)
	if err != nil {
		return nil, err
	}
	x := &serialGetSerialDataClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type Serial_GetSerialDataClient interface {
	Recv() (*Response, error)
	grpc.ClientStream
}

type serialGetSerialDataClient struct {
	grpc.ClientStream
}

func (x *serialGetSerialDataClient) Recv() (*Response, error) {
	m := new(Response)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// SerialServer is the server API for Serial service.
// All implementations must embed UnimplementedSerialServer
// for forward compatibility
type SerialServer interface {
	GetSerialData(*Request, Serial_GetSerialDataServer) error
	mustEmbedUnimplementedSerialServer()
}

// UnimplementedSerialServer must be embedded to have forward compatible implementations.
type UnimplementedSerialServer struct {
}

func (UnimplementedSerialServer) GetSerialData(*Request, Serial_GetSerialDataServer) error {
	return status.Errorf(codes.Unimplemented, "method GetSerialData not implemented")
}
func (UnimplementedSerialServer) mustEmbedUnimplementedSerialServer() {}

// UnsafeSerialServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to SerialServer will
// result in compilation errors.
type UnsafeSerialServer interface {
	mustEmbedUnimplementedSerialServer()
}

func RegisterSerialServer(s grpc.ServiceRegistrar, srv SerialServer) {
	s.RegisterService(&Serial_ServiceDesc, srv)
}

func _Serial_GetSerialData_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(Request)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(SerialServer).GetSerialData(m, &serialGetSerialDataServer{stream})
}

type Serial_GetSerialDataServer interface {
	Send(*Response) error
	grpc.ServerStream
}

type serialGetSerialDataServer struct {
	grpc.ServerStream
}

func (x *serialGetSerialDataServer) Send(m *Response) error {
	return x.ServerStream.SendMsg(m)
}

// Serial_ServiceDesc is the grpc.ServiceDesc for Serial service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Serial_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "protos.Serial",
	HandlerType: (*SerialServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "GetSerialData",
			Handler:       _Serial_GetSerialData_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "protos/serial.proto",
}
